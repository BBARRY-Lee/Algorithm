### 그리디 알고리즘
# 최소한의 아이디어를 떠올리는 능력을 요구
# 가장 좋아보이는 것을 반복 선택해도, 최적의 해를 구할 수 있는 지 검토

## 1. 거스름돈 문제
'''
거스름돈으로 사용할 500원, 100원, 50원, 10원 동전이 무한 존재한다.
손님에게 거슬러 줘야 할 돈이 n원일 때, 동전의 최소개수는?
(단, 거슬러 줘야할 돈n은 항상 10의배수)

* 문제해결 아이디어
최적의 해를 빠르게 구하기 위해 가장 큰 화폐단위부터 거슬로 준다.
N원을 거슬러 줄 때, 가장먼저 500원을 줄 수 있는 만큼 준다.
이후, 100~10원 동전을 차례대로 거슬로 준다
N=1,260일 때 예시를 확인해보자
'''
## 코드 작성
''' N=int(input())
arry=[500, 100, 50, 10]
cnt=0

for coin in arry:
  cnt += N//coin
  N%=coin #나머지를 다시 입력

print(cnt) '''

## 풀이
''' 
코드를 보면 화폐의 종류만큼 반복수행하며, 종류가 K라고 할 때, 위 소스코드의 시간복잡도는 O(K)이다.
이 알고리즘 시간복잡도는 동전의 총 종류에만 영향을 받고, 거슬러 줘야하는 금액과는 무관하다는 것을 알 수 있다.

* 문제해결 아이디어
가진 동전 중 가장 큰 단위가 항상 작은 단위의 배수이므로,
작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문에 해결 가능하다.
'''

### 2. 1이 될 때까지
'''
어떤 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복 선택 수행하려고 한다.
단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택 가능하다.
1. N-1 | 2. N/K
예를 들어 N이 17, K가 4라고 가정하면, 이때 1번 과정을 한번 수행하면 N=16이 된다.
이후 2번의 과정을 두번 수행하면 N=1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이된다.
이는 N을 1로 만드는 최소 횟수이다.
N과 K가 주어질 대 N이 1이 될 때까지 1번 혹은 2번 과정을 수행해야하는 최소 횟수를 구하는 프로그램을 작성

* 문제해결 아이디어
최대한 많이 나누어주는 것이 최소 횟수를 구할 수 있을 것이다.
'''
## 코드 작성
'''
N, K = map(int, input().split())
cnt=0

while True:
  target = (N//K)*K
  cnt+(N-target)
  N=target

  if N < K:
    break
  cnt+=1
  N//=K

cnt+=(N-1)
print(cnt)
'''

### 3. 곱하기 혹은 더하기
'''
각 자리가 숫자(0~9)로만 이뤄진 문자열 s가 주어졌을 때, 왼쪽~오른쪽으로 하나씩 모든 숫자를 확인하여,
숫자 사이에 x 혹은 + 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하시오.
단, +보다 X를 먼저 계산하는 일반방식과는 달리, 모든 연산은 왼쪽부터 순서대로 이루어진다고 가정한다.
예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 576 이다.

* 문제해결 아이디어
대부분 +보다는 x가 더 값을 크게한다.
다만 두 수 중 하나라도 0 혹은 1이면 더하기를 수행해야 한다.
'''
## 코드 작성
'''
s = input()
result=int(s[0])

for i in range(1, len(s)): # 문자길이만큼 반복
  num=int(s[i]) #num에 i를 문자열로 입력
  if num <= 1 or result <= 1: #num이 1이하이거나, result가 1이하면
    result += num 

  else:
    result *= num 

print(result)
'''
### 4. 모험가 길드
'''
모험가 n명이 있다. 모험가 길드에서는 n명의 모험가를 대상으로 공포도를 측정했는데,
공포도가 높은 모험가는 쉽게 공포를 느껴 위험상황에서 대처능력이 떨어진다.
모험가 길드장은 모험가 그룹을 안전히 구성하고자 공포도가 x인 모험가는
반드시 x명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있도록 규정하였다.
길드장은 최대 몇 개의 모험가 그룹을 만들 수 있는지 궁금하다.
n명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성하시오

예를 들어 n=5이고, 각 모험가의 공포도가 2 3 1 2 2라고 가정하면,
이 경우 그룹 1에 공포도가 1,2,3인 모험가를 한명씩 넣고, 그룹2의 공포도가 2인 남은 두명을 넣으면
총 2개의 그룹을 만들 수 있다.
또한, 몇명의 모험가는 마을에 그대로 남아 있어도 되기 때문에 모든 모험가를 틀정한 그룹에 넣을 필요는 없다.

* 문제해결 아이디어
1. 공포도를 오름차순 정렬한다.
2. 앞에서부터 하나씩 확인하며 현재 그룹에 포함된 모험가의 수가
   현재 확인하고 있는 공포도보다 크거나 같다면 이를 그룹으로 설정한다.
'''

n=int(input())
scare=list(map(int, input().split()))
scare.sort() # 오름차순 정렬

result=0 # 총 그룹의 수
cnt=0 # 현재 그룹에 포함된 모험가 수

for i in scare: #공포도가 낮은 것부터 순차적으로 확인
  cnt+= 1 #현 그룹에 해당 모험가 포함
  if cnt >= i: # 현 그룹에 포함된 모험가의 수가 현재의 공포도 이상이면 그룹결성
    result+=1 # 총 그룹 수 증가
    cnt=0 # 현재 그룹에 포함된 모험가의 수 초기화
    
print(result) # 총 그룹의 수 출력